# mms_task.py
    # @classmethod
    # def add_args(cls, parser):
    #     super().add_args(parser)
    #     parser.add_argument(
    #         "--labels",
    #         type=List[str],
    #         default=["ltr"],
    #         help="extension of the label files to load, frame-level labels for"
    #             " pre-training, and sequence-level label for fine-tuning",
    #     )
    #     parser.add_argument(
    #         "--label-dir",
    #         type=Optional[str],
    #         default=None,
    #         help="if set, looks for labels in this directory instead",
    #     )
    #     parser.add_argument(
    #         "--label-rate",
    #         type=int,
    #         default=-1,
    #         help="label frame rate. -1 for sequence label",
    #     )
    #     parser.add_argument(
    #         "--sample-rate",
    #         type=int,
    #         default=16_000,
    #         help="target sample rate. audio files will be up/down "
    #         "sampled to this rate",
    #     )
    #     parser.add_argument(
    #         "--enable-padding",
    #         type=bool,
    #         default=False,
    #         help="pad shorter samples instead of cropping",
    #     )
    #     parser.add_argument(
    #         "--max-sample-size",
    #         type=Optional[int],
    #         default=None,
    #         help="max sample size to keep in training",
    #     )
    #     parser.add_argument(
    #         "--min-sample-size",
    #         type=Optional[int],
    #         default=None,
    #         help="min sample size to keep in training",
    #     )
    #     parser.add_argument(
    #         "--max-trim-sample-size",
    #         type=II("task.max_sample_size"),
    #         help="if set, AddTargetDatasets outputs same keys "
    #         "as AddTargetDataset",
    #     )
    #     parser.add_argument(
    #         "--single-target",
    #         type=Optional[bool],
    #         default=None,
    #         help="if set, AddTargetDatasets outputs same keys "
    #         "as AddTargetDataset",
    #     )
    #     parser.add_argument(
    #         "--random-crop",
    #         type=Optional[bool],
    #         default=True,
    #         help="always crop from the beginning if false",
    #     )
    #     parser.add_argument(
    #         "--pad-audio",
    #         type=Optional[bool],
    #         default=False,
    #         help="pad audio to the longest one in the batch if true",
    #     )
    #     parser.add_argument(
    #         "--pdb",
    #         type=Optional[bool] ,
    #         default=None,
    #         help="if set, looks for labels in this directory instead",
    #     )
    #     parser.add_argument(
    #         "--stack-order-audio",
    #         type=int,
    #         default=1,
    #         help="concatenate n consecutive audio frames for one step",
    #     )
    #     parser.add_argument(
    #         "--skip-verify",
    #         type=Optional[bool],
    #         default=False,
    #         help="skip verifying label-audio alignment",
    #     )
    #     parser.add_argument(
    #         "--image-aug",
    #         type=bool,
    #         default=False,
    #         help="image data augmentation",
    #     )
    #     parser.add_argument(
    #         "--image-crop-size",
    #         type=int,
    #         default=88,
    #         help="image ROI size",
    #     )
    #     parser.add_argument(
    #         "--image-mean",
    #         type=field,
    #         default=0.421,
    #         help="image mean",
    #     )
    #     parser.add_argument(
    #         "--image-std",
    #         type=float,
    #         default=0.165,
    #         help="image std",
    #     )
    #     parser.add_argument(
    #         "--modalities",
    #         type=Optional[List[str]],
    #         default=["audio", "video"],
    #         help='modalities to load',
    #     )
    #     parser.add_argument(
    #         "--is-s2s",
    #         type=bool,
    #         default=False,
    #         help='seq2seq fine-tuning only',
    #     )
    #     parser.add_argument(
    #         "--tokenizer-bpe-name",
    #         type=Optional[str],
    #         default=None,
    #         help='tokenizer model name',
    #     )
    #     parser.add_argument(
    #         "--tokenizer-bpe-model",
    #         type=Optional[str],
    #         default=None,
    #         help='tokenizer model path',
    #     )
    #     parser.add_argument(
    #         "--noise-wav",
    #         type=Optional[str],
    #         default=None,
    #         help='manifest of noise wav files (one wav file path per line)',
    #     )
    #     parser.add_argument(
    #         "--noise-prob",
    #         type=float,
    #         default=0,
    #         help='noise probability',
    #     )
    #     parser.add_argument(
    #         "--noise-snr",
    #         type=Optional[str],
    #         default=None,
    #         help='noise SNR in audio',
    #     )
    #     parser.add_argument(
    #         "--snr-target",
    #         type=Optional[str],
    #         default=None,
    #         help='noise SNR in audio',
    #     )
    #     parser.add_argument(
    #         "--noise-num",
    #         type=int,
    #         default=1,
    #         help='number of noise wav files to mix',
    #     )
    #     parser.add_argument(
    #         "--fine-tuning",
    #         type=bool,
    #         default=False,
    #         help="set to true if fine-tuning AV-Hubert",
    #     )

pip list
Package                  Version     Editable project location
------------------------ ----------- -------------------------------
accelerate               1.7.0
antlr4-python3-runtime   4.8
bitarray                 2.6.0
Brotli                   1.0.9
certifi                  2025.1.31
cffi                     1.17.1
charset-normalizer       3.3.2
colorama                 0.4.6
coverage                 7.8.0
Cython                   3.0.12
dlib                     19.22.1
editdistance             0.6.0
exceptiongroup           1.2.2
fairseq                  0.12.2      /workspace/StreamSpeech/fairseq
filelock                 3.13.1
flake8                   7.2.0
fsspec                   2025.3.2
gmpy2                    2.2.1
hf-xet                   1.1.3
huggingface-hub          0.33.0
hydra-core               1.0.7
idna                     3.10
iniconfig                2.1.0
Jinja2                   3.1.6
joblib                   1.4.2
lxml                     5.3.1
MarkupSafe               3.0.2
mccabe                   0.7.0
mkl_fft                  1.3.11
mkl_random               1.2.8
mkl-service              2.4.0
mpmath                   1.3.0
networkx                 3.4.2
numpy                    2.2.6
nvidia-cublas-cu12       12.4.5.8
nvidia-cuda-cupti-cu12   12.4.127
nvidia-cuda-nvrtc-cu12   12.4.127
nvidia-cuda-runtime-cu12 12.4.127
nvidia-cudnn-cu12        9.1.0.70
nvidia-cufft-cu12        11.2.1.3
nvidia-curand-cu12       10.3.5.147
nvidia-cusolver-cu12     11.6.1.9
nvidia-cusparse-cu12     12.3.1.170
nvidia-cusparselt-cu12   0.6.2
nvidia-nccl-cu12         2.21.5
nvidia-nvjitlink-cu12    12.4.127
nvidia-nvtx-cu12         12.4.127
omegaconf                2.0.6
opencv-python            4.5.4.60
packaging                24.2
pandas                   2.2.3
peft                     0.15.2
pillow                   11.1.0
pip                      23.3
pluggy                   1.5.0
portalocker              3.1.1
protobuf                 6.30.2
psutil                   7.0.0
pycodestyle              2.13.0
pycparser                2.22
pydub                    0.25.1
pyflakes                 3.3.2
PySocks                  1.7.1
pytest                   8.3.5
pytest-cov               6.1.1
pytest-flake8            1.3.0
python-dateutil          2.9.0.post0
python_speech_features   0.6
pytz                     2025.2
PyYAML                   6.0.2
regex                    2024.11.6
requests                 2.32.3
sacrebleu                2.3.1
safetensors              0.5.3
scikit-learn             1.6.1
scipy                    1.10.0
sentencepiece            0.1.96
setuptools               75.8.0
six                      1.17.0
soundfile                0.13.1
sympy                    1.13.1
tabulate                 0.9.0
tensorboardX             2.6.2.2
TextGrid                 1.6.1
threadpoolctl            3.6.0
tokenizers               0.13.3
tomli                    2.2.1
torch                    2.0.1
torchaudio               2.0.2
torchvision              0.15.2
tornado                  6.4.2
tqdm                     4.64.1
transformers             4.30.0
triton                   2.0.0
typing_extensions        4.12.2
tzdata                   2025.2
urllib3                  2.3.0
wheel                    0.45.1
yt-dlp                   2025.3.31


  File "/workspace/StreamSpeech/researches/fairseq_modules/waveform_transforms/__init__.py", line 2, in <module>
    from fairseq.data.audio import (
ImportError: cannot import name 'AudioTransform' from 'fairseq_moudules.data.audio' (/workspace/StreamSpeech/fairseq/fairseq/data/audio/__init__.py)